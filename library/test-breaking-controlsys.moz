/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include ExportModelica
include Electrical
include Mechanical
include Block
include HybridSimulation


def DCMotor(V:Voltage,flange:Rotational) : Equations = {
  let e1:Electrical in
  let e2:Electrical in
  let e3:Electrical in
  let e4:Electrical in
  SignalVoltage V e1 e4;
  Resistor 200. e1 e2;
  Inductor 0.1 e2 e3;
  EMF 1. e3 e4 flange;
  Ground e4
}

let Shaft flangeA:Rotational -> flangeB:Rotational -> Equations =
  let r1:Rotational in
  let r2:Rotational in
  Inertia 0.1 flangeA r1;
  Spring 3.0 r1 r2; 
  Damper 0.02 r1 r2;
  Inertia 0.1 r2 flangeB

def ShaftElement(flangeA:Rotational, flangeB:Rotational) = {
  def r1:Rotational;
  Spring(1, flangeA, r1);
  Damper(0.02, flangeA, r1);
  Inertia(0.01, r1, flangeB);
}


let FlexibleShaft n:Int -> flangeA:Rotational -> flangeB:Rotational -> 
                  Equations =
  if n ==. 1 then 
    ShaftElement flangeA flangeB 
  else 
    let r1:Rotational in
    ShaftElement flangeA r1;
    FlexibleShaft (n -. 1) r1 flangeB

type Element = <?> -> <?> -> Equations

def serialize(n:Int, f1:Rotational, f2:Rotational, elem:Element) -> Equations = {
    if n ==. 1 then
        elem(f1,f2)
    else{
        def node:?;
        elem(f1,node);
        serialize(n -. 1, node, f2, elem); 
    }
}

/*
def AutomaticGearbox(f1:Rotational, f2:Rotational) =
{
    def s1,speed:Real;
    def gear1,gear2:State;

    s1' = 0;
    init s1 10; 
    
    statechart initstate gear1 {
        state gear1 {
              NoEqn;
           transition gear2 when (speed >= 4) action nothing;
        };
        state gear2 {
              init s1 5;
              NoEqn;
        };
    }; 
    
    IdealGear(s1, f1, f2);
    SpeedSensor(f1,speed);
    probe "speed1" = speed;
}
*/

def Connection(flangeA:Rotational, flangeB:Rotational) = 
{
  let tauA:Torque in
  let tauB:Torque in
  let phiA:Angle in
  let phiB:Angle in
  RefBranch tauA phiA flangeA;
  RefBranch (-tauB) phiB flangeB;
  phiA = phiB;  
  tauB = tauA
}



def Breaking(stop:Real, flangeA:Rotational, flangeB:Rotational) =
{
    def time:Real;
    def state1,state2:State;
    time' = 1;
    statechart initstate state1 {
       state state1 {
          Connection(flangeA,flangeB);         
          transition state2 when (time >= stop) action nothing;
       };
       state state2 {
          NoEqn;
       };
    };
}

//Gives a result, but is this the wanted one?
def ControlSys() = {
    def s1,s2,s3,s4:Signal;
    def r1,r2,r3a,r3b,r4:Rotational;
    ConstantSource(1,s1);
    Feedback(s1,s4,s2);
    PID(3,0.7,0.1,10,s2,s3);
    DCMotor(s3,r1);
    IdealGear(4,r1,r2);
    serialize(4,r2,r3a,ShaftElement);
    Breaking(10,r3a,r3b);
    Inertia(0.3, r3b,r4);
    SpeedSensor(r3a,s4);
    probe "angularVelocity" = s4;
}

// Not working, but should?
def ControlSys2() = {
    def s1,s2,s3,s4:Signal;
    def r1,r1a,r1b,r1c,r2,r3,r4:Rotational;
    ConstantSource(1,s1);
    Feedback(s1,s4,s2);
    PID(3,0.7,0.1,10,s2,s3);
    DCMotor(s3,r1);
    DCMotor(lift 1.,r1a);
    Spring(0.1,r1a,r1b);
    Breaking(10,r1b,r1c);
    Spring(0.1,r1c,r1);
    IdealGear(4,r1,r2);
    serialize(4,r2,r3,ShaftElement);
    Inertia(0.3, r3,r4);
    SpeedSensor(r4,s4);
    probe "angularVelocity" = s4;
}


let main = 
  printsim(ControlSys(), 0.01, 40)
  //simulate(ControlSys(), 0.01, 40)
  //printLine(exportModelica("ControlSys",ControlSys()))
