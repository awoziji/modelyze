
include Equation
include HybridSimulation

type Vars = (<Real> => Real)
type VarsList = [(<Real>,Real)]

 
def eulerStep(f:(Vars->Vars), y:Vars, h:Real) : Vars = {
    def yp = f(y);
    def ylst = (Map.toList y);
    def traverse(ylst:VarsList, acc:Vars) : Vars  = {
        match ylst with
        | (s,y)::ys -> traverse ys (Map.add s (y + h * (Map.find s yp)) acc)
        | [] -> acc 
    };
    traverse ylst (Map.empty)
}

def makeStepVals(f:(Vars->Vars), y0:Vars, symb:[<Real>],h:Real, stop:Real) : [StepVal] = {
    def getvals(y:Vars, symb:[<Real>]) : [Real] = {
        match symb with
        | s::ss -> (Map.find s y)::(getvals(y,ss))
        | [] -> []
    };
    def iterSteps(y:Vars, t:Real, acc:[StepVal]) : [StepVal] = {
       if t > stop then acc 
       else
         def newstep = (t, getvals(y,symb));
         def y2 = eulerStep(f, y, h);
         iterSteps(y2, t+h, newstep::acc) 
    };
    revResult(iterSteps(y0, 0, []),[])
}

def simulate(f:(Vars->Vars), names:[String], symb:[<Real>], 
              initvals:[Real], h:Real, stop:Real) = {
    def makeInitMap(syms:[<Real>], initvals:[Real], acc:Vars) : Vars = {
        match (syms,initvals) with
        | (s::ss,i::is) -> makeInitMap(ss,is, (Map.add s i acc))
        | _ -> acc
    };
    def y0 = makeInitMap(symb, initvals, (Map.empty));
    def stepvals = makeStepVals(f,y0,symb,h,stop);
    (names, stepvals)
}



def growthRateRabbits = 0.04 
def deathRateRabbits = 0.0005 
def deathRateFoxes = 0.09 
def efficiencyGrowthFoxes = 0.1 
def rabbits:Real
def foxes:Real

//  init rabbits 700.;
//  init foxes 10.;


def lotkavolterra(y:Vars) : Vars = {
  def r = (Map.find rabbits y);
  def f = (Map.find foxes y);
  Map.add rabbits (growthRateRabbits*r - 
                   deathRateRabbits*r*f)
    (Map.add foxes (efficiencyGrowthFoxes*deathRateRabbits*
                    r*f - deathRateFoxes*f)
                    (Map.empty))
}


def varnames = ["Foxes", "Rabbits"]
def symb     = [foxes,    rabbits]
def initvals = [10.,       700.]

def result = simulate(lotkavolterra, varnames, symb, initvals, 0.1, 500)

def main = print(pprintSimulation(result))
    



















