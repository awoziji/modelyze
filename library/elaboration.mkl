/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

// Notes
// - I did not change elaborate functions or differentation functions.
// - Needed to update the simulation loop to include the discrete changes.


include Modeling
type Node = <>
type Unknown = <>
type Branch = <>
type NodeMap = (Node => Unknown)
type NodeMapList = [(Node,Unknown)]
type BranchSet = (Set Branch)
type BranchList = [Branch]
type ExprMap = (Node => Expr)
type ExprList = [(Node, Expr)]
type ProbeMap =  (String => [Signal])
type InitValMap = (<Real> => (Real,Bool))
type UkSet = (Set <Real>)

// Ukmap maps an unknown (signal type) to an integer value
// representing a unique integer number for the unknown in
// the equation system. The boolean is true if the unknown
// appears differentiated in the equation system.
type UkMap = (Signal => (Int,Bool))
type UkList = [(Signal,(Int,Bool))]

type SubExprMap = (<> => Signal)
type SubExprList = [(<>,Signal)]


let elaborateConnections isBranch:(<> -> Bool) -> 
                         isRefBranch:(<> -> Bool) ->
                         model:Equations -> 
                         Equations =
  let addNode node:Node -> nodemap:NodeMap -> NodeMap =
    if Map.mem node nodemap then nodemap
    else let u:<Real> in Map.add node u nodemap
  in

  let sumexpr branches:BranchSet -> ExprMap = 
    let worker branches:BranchList -> emap:ExprMap -> ExprMap =
      match branches with
      | (b i v p n)::bs if isBranch b ->  
          let emap1 = if Map.mem p emap 
                      then Map.add p ((Map.find p emap) + i) emap
                      else Map.add p i emap in
          let emap2 = if Map.mem n emap1 
                      then Map.add n ((Map.find n emap1) - i) emap1
                      else Map.add n (-i) emap1 in
          worker bs emap2
      | (b i v p)::bs if isRefBranch b -> 
          let emap1 = if Map.mem p emap 
                      then Map.add p ((Map.find p emap) + i) emap
                      else Map.add p i emap in
          worker bs emap1
      | [] -> emap
    in worker (Set.toList branches) (Map.empty)
  in

  let sumzero m:Equations -> branches:BranchSet -> Equations =
    let worker elist:ExprList -> Equations =
      match elist with
      | (_,e)::es -> e = 0.; worker es
      | [] -> m
    in worker (Map.toList (sumexpr branches))
  in

  let potentials model:Equations -> (Equations,BranchSet) =
    let worker m:Equations -> nodemap:NodeMap -> 
                branchset:BranchSet -> (<>,NodeMap,BranchSet) =
      match m with
      | b i v p n if isBranch b ->
        let nodemap2 = addNode n (addNode p nodemap) in
        let eq = (v = (Map.find p nodemap2) - 
                 (Map.find n nodemap2)) in
        (eq,nodemap2,Set.add m branchset)
      | b i v p if isRefBranch b ->
        let nodemap2 = addNode p nodemap in
        let eq = (v = (Map.find p nodemap2)) in
        (eq,nodemap2,Set.add m branchset)
      | e1 ; e2 -> 
         let (e1b,nodemap1,branchset1) = 
               worker e1 nodemap branchset in
         let (e2b,nodemap2,branchset2) = 
               worker e2 nodemap1 branchset1 in
         (e1b ; e2b, nodemap2, branchset2)
      | _ ->  (m,nodemap,branchset) 
    in 
      let (model,_,branchset) = 
        worker model (Map.empty) (Set.empty) 
      in (model,branchset)
  in 
     let (model2,branchset2) = potentials model in
     sumzero model2 branchset2

let addProbe s:String -> u:Signal -> ps:ProbeMap =
    if Map.mem s ps then Map.add s (u::(Map.find s ps)) ps
    else Map.add s [u] ps

let elaborateProbes model:Equations -> (Equations,ProbeMap) =
  let elab e:<> -> ps:ProbeMap -> (<>,ProbeMap) = 
    match e with
    | ~probe (val s:String) -> let u:Signal in (u,addProbe s u ps)
    | e1 e2 -> 
       let (e1b,ps1) = elab e1 ps in
        let (e2b,ps2) = elab e2 ps1 in
       (e1b e2b,ps2)
    | _ -> (e,ps)
  in elab model (Map.empty)

 
let initValues eqs:Equations -> InitValMap =
  let get eqs:Equations -> acc:InitValMap -> InitValMap =
    match eqs with
    | e1 ; e2 -> get e2 (get e1 acc)
    | ~init x (val v:Real) -> Map.add x (v,false) acc
    | _ -> acc
  in get eqs (Map.empty)
 
let unknowns eqs:Equations -> UkSet =
  let get e:<> -> acc:UkSet -> UkSet = 
     match e with
     | e1 e2 -> get e2 (get e1 acc)
     | ~time -> acc
     | uk:<Real> -> Set.add e acc
     | _ -> acc 
  in get eqs (Set.empty)

let noUnknowns eqs:Equations -> Int =
  Set.size (unknowns eqs)

let noEquations eqs:Equations -> Int =
  match eqs with
  | e1 ; e2 -> (noEquations e1) +. (noEquations e2)
  | e1 = e2 -> 1
  | _ -> 0

//Function realUnknowns extracts all unknowns from
//an equations system. The resulting tuple is the number
//of unique unknowns and a UkMap mapping unknowns to unique
//integer values. This function is usually used via function
//makeUkMap. 
let realUnknowns eqs:Equations -> (Int,UkMap) =
  let get e:<> -> acc:(Int,UkMap) -> (Int,UkMap) = 
     match e with
     | ~time -> acc
     | ~der x -> 
        (match x with 
         | uk:<Real> -> 
             let (k,ukmap) = acc in 
             if Map.mem x ukmap 
             then (k,Map.add x (fst (Map.find x ukmap),true) ukmap)
             else ((k+.1,Map.add x (k,true) ukmap))
         | _ -> error "Illegal diffrentiation of expression") 
     | e1 e2 -> get e2 (get e1 acc)
     | uk:<Real> -> if Map.mem e (snd acc) then acc
                    else ((fst acc)+.1,Map.add e (fst acc,false) (snd acc))
     | e1 -> acc 
  in get eqs (0,(Map.empty))

//Returns the mapping between unknowns and unique integer numbers
//in an equation system. See definirion of UkMap.
let makeUkMap eqs:Equations -> UkMap =
    snd (realUnknowns eqs)



