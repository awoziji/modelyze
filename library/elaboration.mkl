/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Modeling

type Expr = <>
type Node = <>
type Unknown = <>
type Branch = <>
type NodeMap = (Node => Unknown)
type NodeMapList = [(Node,Unknown)]
type BranchSet = (Set Branch)
type BranchList = [Branch]
type ExprMap = (Node => Expr)
type ExprList = [(Node, Expr)]
type ProbeMap =  (String => [Signal])
type InitValMap = (<Real> => (Real,Bool))
type UkSet = (Set <Real>)
type UkMap = (Signal => (Int,Bool))
type SubExprMap = (<> => Signal)
type SubExprList = [(<>,Signal)]


let elaborateConnections isBranch:(<> -> Bool) -> 
                         isRefBranch:(<> -> Bool) ->
                         model:Equations -> 
                         Equations =
  let addNode node:Node -> nodemap:NodeMap -> NodeMap =
    if Map.mem node nodemap then nodemap
    else let u:<Real> in Map.add node u nodemap
  in

  let sumexpr branches:BranchSet -> ExprMap = 
    let worker branches:BranchList -> emap:ExprMap -> ExprMap =
      match branches with
      | (b i v p n)::bs when isBranch b ->  
          let emap1 = if Map.mem p emap 
                      then Map.add p ((Map.find p emap) +. i) emap
                      else Map.add p i emap in
          let emap2 = if Map.mem n emap1 
                      then Map.add n ((Map.find n emap1) -. i) emap1
                      else Map.add n (-. i) emap1 in
          worker bs emap2
      | (b i v p)::bs when isRefBranch b -> 
          let emap1 = if Map.mem p emap 
                      then Map.add p ((Map.find p emap) +. i) emap
                      else Map.add p i emap in
          worker bs emap1
      | [] -> emap
    in worker (Set.toList branches) (Map.empty)
  in

  let sumzero m:Equations -> branches:BranchSet -> Equations =
    let worker elist:ExprList -> Equations =
      match elist with
      | (_,e)::es -> e = 0.; worker es
      | [] -> m
    in worker (Map.toList (sumexpr branches))
  in

  let potentials model:Equations -> (Equations,BranchSet) =
    let worker m:Equations -> nodemap:NodeMap -> 
                branchset:BranchSet -> (<>,NodeMap,BranchSet) =
      match m with
      | b i v p n when isBranch b ->
        let nodemap2 = addNode n (addNode p nodemap) in
        let eq = (v = (Map.find p nodemap2) -. 
                 (Map.find n nodemap2)) in
        (eq,nodemap2,Set.add m branchset)
      | b i v p when isRefBranch b ->
        let nodemap2 = addNode p nodemap in
        let eq = (v = (Map.find p nodemap2)) in
        (eq,nodemap2,Set.add m branchset)
      | e1 ; e2 -> 
         let (e1b,nodemap1,branchset1) = 
               worker e1 nodemap branchset in
         let (e2b,nodemap2,branchset2) = 
               worker e2 nodemap1 branchset1 in
         (e1b ; e2b, nodemap2, branchset2)
      | _ ->  (m,nodemap,branchset) 
    in 
      let (model,_,branchset) = 
        worker model (Map.empty) (Set.empty) 
      in (model,branchset)
  in 
     let (model2,branchset2) = potentials model in
     sumzero model2 branchset2

let addProbe s:String -> u:Signal -> ps:ProbeMap =
    if Map.mem s ps then Map.add s (u::(Map.find s ps)) ps
    else Map.add s [u] ps

let elaborateProbes model:Equations -> (Equations,ProbeMap) =
  let elab e:<> -> ps:ProbeMap -> (<>,ProbeMap) = 
    match e with
    | 'probe (val s:String) -> let u:Signal in (u,addProbe s u ps)
    | e1 e2 -> 
       let (e1b,ps1) = elab e1 ps in
        let (e2b,ps2) = elab e2 ps1 in
       (e1b e2b,ps2)
    | _ -> (e,ps)
  in elab model (Map.empty)

/*
//Old code 
let extractSubExpr e:<> -> exprmap:SubExprMap -> (<>,SubExprMap) =
  match e with
  | 'der (uk:Signal) -> 
     if Map.mem e exprmap then
       (match Map.find e exprmap with
        | (e2,true) -> (e2,exprmap)
        | _ -> (e,exprmap))
     else (e,exprmap)
  | 'der e2 ->  
      let (e3,exprmap2) = extractSubExpr e2 exprmap in
      (match e3 with 
       | uk:Signal -> (der e3,exprmap2)
       | _ -> if Map.mem e3 exprmap2 then
                (der (fst (Map.find e3 exprmap2)), exprmap2)
              else
                let x:Signal in 
                (der x,Map.add e3 (x,true) exprmap2))
  | e1 e2 ->   
      let (e1b,exprmap2) = extractSubExpr e1 exprmap in
      let (e2b,exprmap3) = extractSubExpr e2 exprmap2 in
      (e1b e2b,exprmap3)
  | _ -> (e,exprmap)
*/

//Not used right now...
let extractDerDefs eqs:Equations -> acc:SubExprMap -> SubExprMap =
  match eqs with
  | e1 ; e2 -> extractDerDefs e2 (extractDerDefs e1 acc)
  | 'der uk:Signal = uk:Signal -> 
      (match eqs with | e1 = e2 -> Map.add e1 e2 acc)
  | uk:Signal = 'der uk:Signal -> 
      (match eqs with | e1 = e2 -> Map.add e2 e1 acc)
  | _ -> acc


let extractSubExpr e:<> -> exprmap:SubExprMap -> (<>,SubExprMap) =
  match e with
  | 'der e2 ->  
      let (e3,exprmap2) = extractSubExpr e2 exprmap in
      (match e3 with 
       | uk:Signal -> 
           if Map.mem (der e3) exprmap2 then 
             (Map.find (der e3) exprmap,exprmap2)
           else 
             (der e3,exprmap2)
       | _ -> 
           let x:Signal in 
           (der x,Map.add e3 x exprmap2))
  | e1 e2 ->   
      let (e1b,exprmap2) = extractSubExpr e1 exprmap in
      let (e2b,exprmap3) = extractSubExpr e2 exprmap2 in
      (e1b e2b,exprmap3)
  | _ -> (e,exprmap)

let elaborateDerivatives model:Equations -> Equations =
  let makeEquations eqs:Equations -> lst:SubExprList -> Equations =
    match lst with
    | (expr,x)::xs -> x = expr; (makeEquations eqs xs)
    | _::xs -> makeEquations eqs xs 
    | [] -> eqs
  in
  let (eqs,exprmap) = extractSubExpr model (Map.empty) in
  makeEquations eqs (Map.toList exprmap)

  
let initValues eqs:Equations -> InitValMap =
  let get eqs:Equations -> acc:InitValMap -> InitValMap =
    match eqs with
    | e1 ; e2 -> get e2 (get e1 acc)
    | 'Init x (val v:Real) -> Map.add x (v,false) acc
    | 'InitGuess x (val v:Real) -> Map.add x (v,true) acc
    | _ -> acc
  in get eqs (Map.empty)

let unknowns eqs:Equations -> UkSet =
  let get e:<> -> acc:UkSet -> UkSet = 
     match e with
     | e1 e2 -> get e2 (get e1 acc)
     | 'time -> acc
     | uk:<Real> -> Set.add e acc
     | _ -> acc 
  in get eqs (Set.empty)

let noUnknowns eqs:Equations -> Int =
  Set.size (unknowns eqs)

let noEquations eqs:Equations -> Int =
  match eqs with
  | e1 ; e2 -> (noEquations e1) + (noEquations e2)
  | e1 = e2 -> 1
  | _ -> 0
 
let realUnknowns eqs:Equations -> (Int,UkMap) =
  let get e:<> -> acc:(Int,UkMap) -> (Int,UkMap) = 
     match e with
     | e1 e2 -> get e2 (get e1 acc)
     | 'time -> acc
     | 'der x -> 
        (match x with 
         | uk:<Real> -> 
             let (k,ukmap) = acc in 
             if Map.mem e ukmap 
             then (k,Map.add e (fst (Map.find e ukmap),true) ukmap)
             else ((k+1,Map.add e (k,true) ukmap))
         | _ -> error "Illegal diffrentiation of expression") 
     | uk:<Real> -> if Map.mem e (snd acc) then acc
                    else ((fst acc)+1,Map.add e (fst acc,false) (snd acc))
     | e1 -> acc 
  in get eqs (0,(Map.empty))

let makeUkMap eqs:Equations -> UkMap =
    snd (realUnknowns eqs)



