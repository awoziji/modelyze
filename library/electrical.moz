/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Physical

def Resistor(R:Real, p:Electrical, n:Electrical) = {
    def i:Current;
    def v:Voltage;
    Branch(i,v,p,n);
    R * i = v
}

def Capacitor(C:Real, p:Electrical, n:Electrical) = {
    def i:Current;
    def v:Voltage;
    Branch(i,v,p,n);
    C * v' = i;
}

def Inductor(L:Real, p:Electrical, n:Electrical) = {
    def i:Current;
    def v:Voltage;
    Branch i v p n;
    L * i' = v;
}

def Ground(p:Electrical) = {
    def i:Current;
    def v:Voltage;
    RefBranch(i,v,p);
    v = 0.
}
   
def SineVoltage(V:Real, f:Real, p:Electrical, n:Electrical) = {
    def PI = 3.1415;
    def i:Current;
    def v:Voltage;
    def time:Real;
    time' = 1.0;
    Branch i v p n;
    v = V * sin(2.0 * PI * f * time);
}

def ConstantVoltage(V:Real, p:Electrical, n:Electrical) = {
    def i:Current;
    def v:Voltage;
    Branch i v p n;
    v = V;
}

def SignalVoltage(V:Voltage, p:Electrical, n:Electrical) = {
    def i:Current;
    def v:Voltage;
    Branch i v p n;
    v = V; 
}

def EMF(k:Real, p:Electrical, n:Electrical, flange:Rotational) = {
    def i:Current;
    def v:Voltage;
    def w:AngularVelocity;
    def phi:Angle;
    def tau:Torque;
    Branch i v p n;
    RefBranch (-tau) phi flange;
    w = der(phi);
    k * w = v;
    tau =  k * i;
}


def VoltageSensor(p:Electrical, n:Electrical, output:Signal) = {
  Branch 0.0 output p n;
}

def PotentialSensor(p:Electrical, output:Signal) = {
  RefBranch 0.0 output p;
}

def CurrentSensor(p:Electrical, n:Electrical, output:Signal) = {
  Branch output 0.0 p n;
}




