

include Optimization

// Defines a simple test model that includes the optimization problem
def VanDerPol() = {
    // Define variables
    def x1:Signal in
    def x2:Signal in
    def u:Signal in

    //State the u is an input
    input u;

    //Initial values for x1 and x2
    init x1 0;
    init x2 1;	

    //Differential equation
    x1' = (1 - x2^2)*x1 - x2 + u
    x2' = x1

    // Cost function
    minimize integral (x1^2 + x1^2 + u^2) interval 0 4
}

def main = {
  //Get the goal function and intervals
  def (L,start,stop) = getOptProblem(TestModel(-1)) in

  def (x,y,u) = extractVariables(TestModel(-1)) in

  //dpa is "DebugPrintAfter". A generic expression printer
  //which is useful when just testing things. Here we can see
  //that we extracted the optimization problem.
  (dpa (L,start,stop),dpa (x,y,u))


  //The actual DAE is already directly accessable when 
  //instantiating the model
}
    



