/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

include MechsysBasics
include Simulation
include ExportModelica


let g = 9.81

def Pendulum(m:Real,l:Real,angle:Real) = {
    def x,y,T:Real;
    init x (l*sin(angle));
    init y (-l*cos(angle));
     
    -T*x/l = m*x'';
    -T*y/l - m*g = m*y'';     
    x^2 + y^2 = l^2;
    probe "x" = x;
    probe "y" = y;
}


type InitValMap = <Real> => <Real>

def getInitValues(eqs:Equations, acc:InitValMap) -> InitValMap = {
    match eqs with
    | e1 ; e2 -> getInitValues(e2, getInitValues(e1,acc))
    | ~init x v -> Map.add x v acc
    | _ -> acc
}


def getUnknowns(exp:<?>, acc:(Set <Real>)) -> (Set <Real>) = {
    match exp with
    | e1 e2 -> getUnknowns(e2,getUnknowns(e1,acc))
    | sym:Real -> Set.add exp acc
    | _ -> acc
}


def TwoEqs(x:<Real>) = {
    def y:Real;
    x + 12 = 3 * y;
    2 * y = 33 * x;
}

def LinearEqs = {
    def a,b:Real;
    TwoEqs(2*a+b);
    TwoEqs(a-3*b);
}


let pi = 3.1415

def der : Real -> Real

def expr(e:<Real>) -> <Real> = {
    match e with
    | der x -> x
    | sym:Real -> e
}

def paperInfo = {
  let inst = Pendulum(5,3,45*pi/180) in
  let (inst2,newmap) = elaborateDerivatives(inst,Map.empty) in
  let _ = dprint(inst2) in
  let _ = dprint("---------") in
  let _ = dprint(getUnknowns(inst2,Set.empty)) in
  let _ = dprint("---------") in
  let _ = dprint(("Init vals: ",  getInitValues(inst2,Map.empty))) in
  let _ = dprint("---------") in
  let _ = dprint(getUnknowns(LinearEqs,Set.empty)) in
  let _ = dprint("---------") in
  let _ = dprint(LinearEqs) in
  let _ = dprint("---------") in
  let _ = dprint(expr(der 3)) in
  ()
}

   








