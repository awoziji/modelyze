/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
  Name:  Hybrid Ball with Stairs
  Cases: - Tests transistion between two states
         - Tests the use of discrete variables modelled using
           derivatives set to 0 (e.g., equation "ground' = 0."
         - Tests the use of several probe variables.
*/

include MechsysBasics
include HybridSimulation
include ExportModelica
include HybridModeling



def HybridBallWithStairs(m:Real,l:Real,startAngle:Real) = {
  def g = 9.81;
  //def x,y:Position in
  def x:Position;
  def y:Position;  //Serious error. If y is before x, we get wrong result.
  def ground:Position;

  def Pendulum:State;
  def BouncingBall:State;
  
  init(ground = -3);
  ground' = 0;

  statechart initstate Pendulum {
    state Pendulum {
      def T:Force;

      init (x = l*sin(startAngle));
      init (y = -l*cos(startAngle));

      -T*x/l = m*x'';
      -T*y/l - m*g = m*y'';     
      (x^2 + y^2)'' = (l^2)'';

      transition BouncingBall when (time > 2)
        action nothing
    };

    state BouncingBall {    
      def timer:Signal;

      timer' = 1;

      x'' = 0;
      -m*g = m*y'';
  
      transition BouncingBall when (y <= ground)
        action (init(y' = y' * -0.7));

      transition BouncingBall when (timer > 0.3 && ground > -5)
        action (init(timer = 0) ; init(ground = ground - 0.2))
    }

  };

  probe("ground") = ground;
  probe("y") = y
}  


def main = 
  def angle = 45.*3.14/180;
  printsim (HybridBallWithStairs 5.0 2.0 angle) 0.01 6
//  simulate (HybridBallWithStairs 5.0 2.0 angle) 0.01 6.
