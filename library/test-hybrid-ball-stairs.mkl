/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
  Name:  Hybrid Ball with Stairs
  Cases: - Tests transistion between two states
         - Tests the use of discrete variables modelled using
           derivatives set to 0 (e.g., equation "ground' = 0."
         - Tests the use of several probe variables.
*/

include MechsysBasics
include HybridSimulation
include ExportModelica
include HybridModeling


let HybridBallWithStairs m:Real -> l:Real -> startAngle:Real -> Equations =
  let g = 9.81 in
  let x:Position in
  let y:Position in
  let ground:Position in

  let Pendulum:State in
  let BouncingBall:State in
  
  init ground (-3.0);
  ground' = 0.;

  statechart initstate Pendulum begin
    state Pendulum begin
      let T:Force in

      init x (l*sin startAngle);
      init y (-l*cos startAngle);

      -T*x/l = m*x'';
      -T*y/l - m*g = m*y'';     
      (x^2. + y^2.)'' = (l^2.)'';

      transition BouncingBall when (time > 2.) 
        action nothing
    end;

    state BouncingBall begin    
      let timer:Signal in

      timer' = 1.;

      x'' = 0.;
      -m*g = m*y'';
  
      transition BouncingBall when (y <= ground)  
        action (y' <- y' * -0.7);

      transition BouncingBall when (timer > 0.3 && ground > -5.)
        action (timer <- 0.; ground <- ground - 0.2)
    end

  end;

  probe "ground" = ground;
  probe "y" = y

let main = 
  let angle = 45.*3.14/180. in
  printsim (HybridBallWithStairs 5.0 2.0 angle) 0.01 6.
//  simulate (HybridBallWithStairs 5.0 2.0 angle) 0.01 6.
