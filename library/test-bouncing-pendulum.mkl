/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
  Name:  Bouncing Pendulum
  Cases: - Tests transistion between two states.
         - Tests the use of higher-order derivatives.
*/

include MechsysBasics
include HybridSimulation
include ExportModelica
include HybridModeling

// Work in progress. Still not working correct.
def BouncingPendulum(m:Real,l:Real,startAngle:Real) = {
  def g = 9.81;
  def floor = -4;
  def x,y:Position;
  def Pendulum,BouncingBall:State;

  statechart initstate Pendulum {
    state Pendulum {
      let T:Force in

      init x (l*sin(startAngle));
      init y (-l*cos(startAngle));
     
      -T*x/l = m*x'';
      -T*y/l - m*g = m*y'';     
      (x^2 + y^2)'' = (l^2)'';
      probe "T" = T;
      transition BouncingBall when (time >= 3.2) 
        action nothing;
    };

    state BouncingBall {
      x'' = 0;
      -m*g = m*y'';

      transition BouncingBall when (y <= floor) 
        action (y' <-  y' * -0.7);
    };
  };

  probe "y" = y;
}


def main = 
  def angle = 120.*3.14/180;
  printsim (BouncingPendulum 0.13 2. angle) 0.01 8.












