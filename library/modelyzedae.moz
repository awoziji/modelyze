/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Differentiation
include IndexReduction
include Elaboration
include SimOutput

type Residual = Real -> {Real} -> {Real} -> [Real]
type Varvals = <Real> -> <Real>

// General expression evaluation
def eval(expr:<?>, yy:Varvals, yp:Varvals, ctime:Real) -> ? = {
    match expr with
    | time -> ctime
    | der x -> 
        (match x with 
         | sym:Real -> eval(yp(x), yy, yp, ctime)  
         | _ -> error "Derivatives only allowed on unknowns")
    | sym:Real -> eval(yy(expr), yy, yp, ctime)
    | f e -> (eval(f,yy,yp,ctime)) (eval(e,yy,yp,ctime))
    | lift v:? -> v
    | _ ->  error "Unsupported model construct" 
}

// Evaluate an expression of real type. The unknowns in the
// expression are looked up in yy and yp arrays.
def evalFromArray(expr:Expr, ukmap:UkMap, ctime:Real, yy:{Real}, yp:{Real}) -> Real = {
  def yyfun(s:Signal) -> Signal = {Array.get yy (fst(Map.find s ukmap))};
  def ypfun(s:Signal) -> Signal = {Array.get yp (fst (Map.find s ukmap))};
  eval(expr,yyfun,ypfun,ctime);
}

// Create the residual function of the DAE. Used by IDA/Sundials.
def makeResidual(ukmap:UkMap, model:Equations, ctime:Real, yy:{Real}, yp:{Real}) -> [Real] = {
  def realExpr(expr:Expr) = evalFromArray(expr,ukmap,ctime,yy,yp);
  def traverseEq(m:Equations,acc:[Real]) -> [Real] = {
    match m with
    | e1 ; e2 -> traverseEq(e2,traverseEq(e1,acc))
    | e1 = e2 -> (realExpr(e1) - realExpr(e2))::acc
    | _ -> acc
  };
  traverseEq(model,[]);
}

//Generate arrays of initial values
def makeInitValues(model:Equations, ukmap:UkMap) -> ({Real},{Real}) = {
  def initvalmap = initValues(model);
  def size = (Map.size ukmap);
  def yy = (Array.make size 0.);
  def yp = (Array.make size 0.);
  def setvals(initvals:[(Signal,(Real,Bool))]) -> {Real} = {
    match initvals with
    | (u,(v,_))::xs -> {
        def _ = (Array.set yy (fst (Map.find u ukmap)) v);      
        setvals xs;
      }
    | [] -> yy
  };
  (setvals(Map.toList initvalmap), yp)
}


def initConditionCorrection(ukmap:UkMap) -> {Real} = {
  def id = {Array.make (Map.size ukmap) 0.};
  def worker(uklist:[(Signal,(Int,Bool))]) -> {Real} = {
    match uklist with
    | (u,(i,true))::us -> {
         def _ = (Array.set id i 1.0); 
         worker us;
      }
    | _::us -> worker us
    | [] -> id
  };
  worker (Map.toList ukmap);
}

def simulate(model:Equations, steptime:Real, endtime:Real) -> SimulationResult = {
  def (model1,probes) = elaborateProbes(model);
  def model2 = elaborateConnections(model1);
  def probelist = (Map.toList probes);
  def (model3,_) = elaborateDerivatives(model2,Map.empty);
  def (model4,_) = indexReducationPantelides(model3, Map.empty);
  def ukmap = makeUkMap(model4);
  def residual = (specialize (makeResidual(ukmap)) model4);
  def (yy,yp) = makeInitValues(model4, ukmap);
  def id = initConditionCorrection(ukmap);
  def state = (DAESolver.make yy yp id residual);
  def simloop(currtime:Real, acc:[StepVal]) -> [StepVal] = {
    if currtime >= endtime then acc
    else {
      def newtime = (DAESolver.step steptime state);
      def stepval = makeStepVal(newtime, yy, probelist, ukmap);
      if newtime == 0. then acc
      else simloop(newtime,stepval::acc);
    }
  };  
    (makeProbeNames probelist 1,reverse(simloop(0.,[]))) 
}


def printsim(model:Equations, steptime:Real, endtime:Real) =
    print(pprintSimulation(simulate(model,steptime,endtime)))





