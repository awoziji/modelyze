

include Base

def x = 3 + 4

def foo1(x:Int,y:Int) = x +. y
let foo2 xx:(Int,Int) -> Int = 
     def (x,y) = xx;
       x +. y

def _ = dpa(foo1 10 20)
def _ = dpa(foo1(10,20))
def _ = dpa(foo2 (10,20))
def _ = dpa(foo2((10,20)))

def _ = dpa((foo1)(10,20))
def _ = dpa((foo2) (10,20))
def _ = dpa((foo2)((10,20)))


let foo3 x:Int -> y:Int -> zz:(Int,Int) -> Int =
  let (z1,z2) = zz in
  x +. y +. z1 +. z2 


def _ = dpa((foo3(10))(20,(30,40)))
//def _ = dpa((foo3(10))(20)((30,40)))  //Example that should work
def _ = dpa(((foo3(10))(20))((30,40)))
def _ = dpa(foo3 10 20((30,40)))

let foo4 x:() -> Int = 2

def _ = dpa(foo4())
def _ = dpa(foo4 ())

def u1,u2:<Real>
def u3:<Real>

def ff() = dpa "Hej" 

def test = {
  def foo(x:Real,y:Int) : Real = 1 + x + y;
  def _ = dpa ((x + 4) + foo(1.1,2));
  def _ = ff();
  def _ = (ff)();
  def _ = ((ff))();
  ()
}
