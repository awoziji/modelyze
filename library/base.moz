/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/


def (mod) : Int -> Int -> Int = @@int_mod
def (+.) : Int -> Int -> Int = @@int_add
def (-.) : Int -> Int -> Int = @@int_sub
def (*.) : Int -> Int -> Int = @@int_mul
def (/.) : Int -> Int -> Int = @@int_div
def (<.) : Int -> Int -> Bool = @@int_less
def (<=.) : Int -> Int -> Bool = @@int_less_equal
def (>.) : Int -> Int -> Bool = @@int_great
def (>=.) : Int -> Int -> Bool = @@int_great_equal
def (==.) : Int -> Int -> Bool = @@int_equal
def (!=.) : Int -> Int -> Bool = @@int_not_equal
def (+) : Real -> Real -> Real = @@real_add
def (-) : Real -> Real -> Real = @@real_sub
def (*) : Real -> Real -> Real = @@real_mul
def (/) : Real -> Real -> Real = @@real_div
def (<) : Real -> Real -> Bool = @@real_less
def (<=) : Real -> Real -> Bool = @@real_less_equal
def (>) : Real -> Real -> Bool = @@real_great
def (>=) : Real -> Real -> Bool = @@real_great_equal
def (==) : Real -> Real -> Bool = @@real_equal
def (!=) : Real -> Real -> Bool = @@real_not_equal
def (!) : Bool -> Bool = @@bool_not
def (&&) : Bool -> Bool -> Bool = @@bool_and
def (||) : Bool -> Bool -> Bool = @@bool_or
def (--.) : Int -> Int = @@int_neg
def (--) : Real -> Real = @@real_neg
def print : String -> () = @@print
def bool2string : Bool -> String = @@bool2string
def int2string : Int -> String = @@int2string 
def real2string : Real -> String = @@real2string
def int2real : Int -> Real = @@int2real
def real2int : Real -> Int = @@real2int
def string2bool : String -> Bool = @@string2bool
def string2int : String -> Int = @@string2int
def string2real : String -> Real = @@string2real
def isBoolString : String -> Bool = @@isboolstring
def isRealString : String -> Bool = @@isrealstring
def isIntString : String -> Bool = @@isintstring
def sin : Real -> Real = @@sin
def cos : Real -> Real = @@cos
def tan : Real -> Real = @@tan
def asin : Real -> Real = @@asin
def acos : Real -> Real = @@acos
def atan : Real -> Real = @@atan
def sinh : Real -> Real = @@sinh
def cosh : Real -> Real = @@cosh
def tanh : Real -> Real = @@tanh
def ceil : Real -> Real = @@ceil
def floor : Real -> Real = @@floor
def log : Real -> Real = @@log
def log10 : Real -> Real = @@log10
def sqrt : Real -> Real = @@sqrt
def exp : Real -> Real = @@exp
def (^) : Real -> Real -> Real = @@exponentiation
def substr : String -> Int -> Int -> String = @@string_substr
def strlen : String -> Int = @@string_strlen
def (++) : String -> String -> String = @@string_concat

def INFINITE = 1./0.

type RealSignal = <Real>
type IntSignal = <Int>
type BoolSignal = <Bool>


def abs(x:Real) -> Real = {
  if x < 0. then x * -1.0 else x;
}

def max(x:Real, y:Real) -> Real = {
  if x >= y then x else y;
}

def printLine(s:String) -> () = {
    def _ = print s;
    print "\n";
}

def printIntLine(i:Int) -> () = {
    printLine(int2string(i))
}

def printRealLine(i:Real) -> () = {
    printLine(real2string(i));
}

def reverse(lst:[?]) -> [?] = {
    def work(lst:[?],acc:[?]) -> [?] = {
        match lst with
        | l::ls -> work(ls,l::acc) 
        | [] -> acc
    };
    work(lst,[])
}

def append(l1:[?], l2:[?]) -> [?] = {
    def work(lst:[?]) -> [?] = {
        match lst with
        | l::ls -> l::(work(ls))
        | [] -> l2
    };
    work(l1)        
}

