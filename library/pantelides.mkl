/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

// pantelides.mkl
//
// This file include the implementation of Pantelide's algorithm, published
// in Constantinos C. Pantelides "The Consitent Initialization of
// of Differential-Algebraic Systems", SIAM Journal on Scientific and 
// Statistical Computing, vol 9, No 2., 1988


type ENode = <>
type VNode = <>

type EqsGraph = (ENode => [VNode])
type EqsGraphList = [(ENode,[VNode])]
type ColorESet = Set ENode
type ColorVSet = Set VNode
type ColorEList = [ENode]
type ColorVList = [VNode]
type AssignMap = (VNode => ENode)
type PathFound = Bool

type EqMap = (ENode => ENode)
type EqList = [(ENode,ENode)]
type VarMap = (VNode => VNode)
type VarList = [VNode]

//Algorithm AUGMENTPATH according to page 217 by Pantelides (1988)
// What is the variable set A?
def augmentPath(graph:EqsGraph, i:ENode, colE:ColorESet, colV:ColorVSet, 
    assign:AssignMap) : (PathFound,ColorESet,ColorVSet,AssignMap) = {

  // Step (2) in the Pantelides paper
  def assignPath(jlist:VarList) : (PathFound,AssignMap) = {
    match jlist with  //Step (2)
    | j::js -> 
      if Map.mem j assign then assignPath js 
      else (true,Map.add j i assign)
    | [] -> (false,assign)
  };

  // Step (3) in the Pantelides paper
  def everyJ(vlist:VarList, colE:ColorESet, colV:ColorVSet, assign:AssignMap) :
            (PathFound,ColorESet,ColorVSet,AssignMap) = {
    match vlist with //(Step (3)
    | j::js if Set.mem j colV -> everyJ(js, colE, colV, assign)
    | j::js -> {
         def colV2 = (Set.add j colV);
         def k = (Map.find j assign);
         def (found,colE3,colV3,assign3) = 
           augmentPath(graph, k, colE, colV2, assign);

         if found then
           (true,colE3,colV3,Map.add j i assign3)
         else
           everyJ(js, colE3, colV3, assign3)
      }
    | [] -> (false,colE,colV,assign)
  };

  def colE2 = (Set.add i colE);  //Step (1) 
  def jList = (Map.find i graph);
  def (found,assign2) = assignPath(jList);
  if found then 
     (true,colE2,colV,assign2)
  else 
     everyJ(jList, colE2, colV, assign2)
}


//Algorithm 4.1 according to page 218 by Pantelides (1988)
// Parameters: 
//   equationGraph:  
//           A map from equation nodes to a list of variable 
//           nodes that representing the bipartite graph of
//           the equation system.
//   variableMap:   
//           A map from variables to variables representing
//           the relation from variable to its derivative.
//           If a variable does not exist in the co-domain
//           of vmap, but is part of the graph, it is a 
//           algebraic variable, i.e. it does not appear
//           differentiated. The variable map is modeling
//           the Variable Association map A, as stated in
//           Pentelides original paper.
// return value:  
//           Returns two maps, one from variables to variables
//           (derivative relation) and one for equation nodes
//           to equation nodes. The variable map has the same
//           structure as the input parameter 'variableMap'.
//           For an equation map 'emap()', equation 
//           'emap(e1) = e2' states that equation 'e2' should
//           be created by differentiating 'e1'. 
def pantelides(equationGraph:EqsGraph, variableMap:VarMap,  
                makeVNode:(()->VNode), makeENode:(()->ENode)) 
                : (VarMap,EqMap) = {
  // Delete V-nodes that has a derivative (3b-1)
  def deleteVNodes(list:EqsGraphList, A:VarMap, accEq:EqsGraph, 
                   accV:[VNode]) :  EqsGraph = {
    match list with
    | (e,v::vs)::es -> 
        deleteVNodes((e,vs)::es, A, accEq, 
                     if Map.mem v A then accV else v::accV)
    | (e,[])::es -> deleteVNodes es A (Map.add e accV accEq) [] 
    | [] -> accEq
  };

  // Differentiate variables (3b-5 (i))
  def diffVars(lst:ColorVList, A:VarMap) : VarMap = {
    match lst with
    | j::js -> def M = makeVNode();
               diffVars js (Map.add j M A)
    | [] -> A
  };

  // Differentiate equations (3b-5 (ii))
  def diffEqs(lst:ColorEList, A:VarMap, B:EqMap, graph:EqsGraph) 
              : (EqMap,EqsGraph) = {
    def mkEdges(lst:[VNode]) : [VNode] = {
       match lst with
       | j::js -> j::(if Map.mem j A then (Map.find j A)::mkEdges(js)
                      else mkEdges(js))
       | [] -> []
    };

    match lst with
      | l::ls ->
          def N = makeENode();
          def edges = mkEdges (Map.find l graph);
          def graph2 = (Map.add N edges graph);
          def B2 = (Map.add l N B); 
          diffEqs ls A B2 graph2 
      | [] -> (B,graph)
  };

  //Update matching edges (assignment) (3b-5 (iii))
  def updateAssign(lst:ColorVList, A:VarMap, B:EqMap,
                   assign:AssignMap) : AssignMap = {
    match lst with
    | j::js -> let e = Map.find (Map.find j assign) B in
               let v = Map.find j A in
               updateAssign js A B (Map.add v e assign)
    | [] -> assign
  };

  // The repeat loop (3b)
  def repeat(i:ENode, graph:EqsGraph, assign:AssignMap,
             A:VarMap, B:EqMap) : (EqsGraph,AssignMap,VarMap,EqMap) = {
    // Call (3b-1)
    def graph2 = deleteVNodes(Map.toList graph, A, Map.empty, []);
    // Call (3b-4)
    
    def (pathFound,colorE,colorV,assign2) = 
          augmentPath(graph2, i, Set.empty, Set.empty, assign);

    if pathFound then 
        (graph,assign2,A,B)      
    else {
      // Differentiate and repeat
      def colorVList = (Set.toList colorV);
      def colorEList = (Set.toList colorE);
      def A2 = diffVars(colorVList,A);
      def (B2,graph3) = diffEqs(colorEList, A2, B, graph);  
      def assign3 = updateAssign(colorVList, A2, B2, assign2);
      def i2 = (Map.find i B2);
      repeat i2 graph3 assign3 A2 B2 
    }
  };

  // Step (2), loop through each original equation node
  def foreachEq(eqlist:EqsGraphList, graph:EqsGraph, assign:AssignMap,
                A:VarMap, B:EqMap) : (VarMap,EqMap) = {
    match eqlist with
    | [] -> (A,B)
    | (k,_)::eqs -> {
        //Do repreat loop for each equation. k is the equation identifier.
        def (graph2,assign2,A2,B2) = repeat(k,graph,assign,A,B);
        foreachEq(eqs,graph2,assign2,A2,B2)
      }
  };

  // Initializiation (1)
  def assign = (Map.empty);
  def B = (Map.empty);

  // Execute the for loop over all equations
  foreachEq(rev(Map.toList equationGraph), equationGraph, assign, variableMap, B)
  
}
    
















