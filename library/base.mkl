/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/


let (mod) : Int -> Int -> Int = @@int_mod
let (+.) : Int -> Int -> Int = @@int_add
let (-.) : Int -> Int -> Int = @@int_sub
let (*.) : Int -> Int -> Int = @@int_mul
let (/.) : Int -> Int -> Int = @@int_div
let (<.) : Int -> Int -> Bool = @@int_less
let (<=.) : Int -> Int -> Bool = @@int_less_equal
let (>.) : Int -> Int -> Bool = @@int_great
let (>=.) : Int -> Int -> Bool = @@int_great_equal
let (!=.) : Int -> Int -> Bool = @@int_not_equal
let (+) : Real -> Real -> Real = @@real_add
let (-) : Real -> Real -> Real = @@real_sub
let (*) : Real -> Real -> Real = @@real_mul
let (/) : Real -> Real -> Real = @@real_div
let (<) : Real -> Real -> Bool = @@real_less
let (<=) : Real -> Real -> Bool = @@real_less_equal
let (>) : Real -> Real -> Bool = @@real_great
let (>=) : Real -> Real -> Bool = @@real_great_equal
let (!=) : Real -> Real -> Bool = @@real_not_equal
let (!) : Bool -> Bool = @@bool_not
let (&&) : Bool -> Bool -> Bool = @@bool_and
let (||) : Bool -> Bool -> Bool = @@bool_or
let (--.) : Int -> Int = @@int_neg
let (--) : Real -> Real = @@real_neg
let print : String -> () = @@print
let bool2string : Bool -> String = @@bool2string
let int2string : Int -> String = @@int2string 
let real2string : Real -> String = @@real2string
let int2real : Int -> Real = @@int2real
let real2int : Real -> Int = @@real2int
let string2bool : String -> Bool = @@string2bool
let string2int : String -> Int = @@string2int
let string2real : String -> Real = @@string2real
let isBoolString : String -> Bool = @@isboolstring
let isRealString : String -> Bool = @@isrealstring
let isIntString : String -> Bool = @@isintstring
let sin : Real -> Real = @@sin
let cos : Real -> Real = @@cos
let tan : Real -> Real = @@tan
let asin : Real -> Real = @@asin
let acos : Real -> Real = @@acos
let atan : Real -> Real = @@atan
let sinh : Real -> Real = @@sinh
let cosh : Real -> Real = @@cosh
let tanh : Real -> Real = @@tanh
let ceil : Real -> Real = @@ceil
let floor : Real -> Real = @@floor
let log : Real -> Real = @@log
let log10 : Real -> Real = @@log10
let sqrt : Real -> Real = @@sqrt
let exp : Real -> Real = @@exp
let (^) : Real -> Real -> Real = @@exponentiation
let substr : String -> Int -> Int -> String = @@string_substr
let strlen : String -> Int = @@string_strlen
let (++) : String -> String -> String = @@string_concat


let abs x:Real -> Real = 
  if x < 0. then x * -1.0 else x

let max x:Real -> y:Real -> Real = 
  if x >= y then x else y


let printLine s:String -> () = 
    let _ = print s in print "\n"

let printIntLine i:Int -> () =
    printLine  (int2string i)

let printRealLine i:Real -> () =
    printLine  (real2string i)


