/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

include ExportModelica
include AnalogElectrical
include RotationalMechanical
include Block
include Simulation


def DCMotor(V:Voltage,flange:Rotational) = {
  def e1, e2, e3, e4:Electrical;
  SignalVoltage(V, e1, e4);
  Resistor(200, e1, e2);
  Inductor(0.1, e2, e3);
  EMF(1, e3, e4, flange);
  Ground(e4);
}

let Shaft flangeA:Rotational -> flangeB:Rotational -> Equations =
  let r1:Rotational in
  let r2:Rotational in
  Inertia 0.1 flangeA r1;
  Spring 3.0 r1 r2; 
  Damper 0.02 r1 r2;
  Inertia 0.1 r2 flangeB

def ShaftElement(flangeA:Rotational, flangeB:Rotational) = {
  def r1:Rotational;
  Spring(1, flangeA, r1);
  Damper(0.02, flangeA, r1);
  Inertia(0.01, r1, flangeB);
}


let FlexibleShaft n:Int -> flangeA:Rotational -> flangeB:Rotational -> 
                  Equations =
  if n ==. 1d then 
    ShaftElement flangeA flangeB 
  else 
    let r1:Rotational in
    ShaftElement flangeA r1;
    FlexibleShaft (n -. 1d) r1 flangeB

type Element = <?> -> <?> -> Equations

def serialize(n:Real, f1:Rotational, f2:Rotational, elem:Element) -> Equations = {
    def recursive(n:Int, f1:Rotational, f2:Rotational) -> Equations = {
       if n ==. 1d then
            elem(f1,f2)
       else{
            def node:?;
            elem(f1,node);
            recursive(n -. 1d, node, f2);
       }
    };
    recursive(real2int(n), f1, f2);
}  


def CPS() = {
    def s1, s2, s3, s4:Signal;
    def r1, r2, r3, r4:Rotational;
    ConstantSource(1, s1);
    Feedback(s1, s4, s2);
    PID(3, 0.7, 0.1, 10, s2, s3);
    DCMotor(s3, r1);
    IdealGear(4, r1, r2);
    serialize(5, r2, r3, ShaftElement);
    Inertia(0.3, r3, r4);
    SpeedSensor(r4, s4);
    probe "angularVelocity" = s4;
}

let main = 
  printsim(CPS(), 0.01, 40)
  //printLine(exportModelica("ControlSys",ControlSys()))
