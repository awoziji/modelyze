
include Optimization

def VanDerPol() = {
    // Define variables
    def x1,x2,u:Signal;

    // State that u is an input
    input u;

    // Initial values for x1 and x2
    init x1 0;
    init x2 1; 

    // Differential equation
    x1' = (1 - x2^2)*x1 - x2 + u;
    x2' = x1;

    // Cost function
    minimize integral (x1^2 + x2^2 + u^2) interval 0 4
}

//Expected output
// ({x1=>mvar#1,x2=>mvar#2},{},{u=>mvar#3})


// Defines a simple test model that includes the optimization problem
def TestModel(c:Real) = {
    //A simple hello world DAE (actually an ODE...)
    def x:Signal;
    def u:Signal;

    //State the u is the unkown input signal that we are computing
    input u;

    //Initial value for x
    init x 2;

    //Differential equation
    x' = c*x + u;
    
    //Here is an example how the user would define the 
    //optimization problem. 
    minimize integral (x*u) interval 0 4  
}

def main = {
  //def m = TestModel(-1) in
  def m = VanDerPol();

  //Get the goal function and intervals
  def (L,start,stop) = getOptProblem(m);

  def vars = extractVariables(m);
  def meshVars = generateMeshVars(vars,4);
  def x0 = genInitMap(m);
  def nlp_constr = genNLPConstraint(m,x0,0.1,meshVars);   
  def nlp_cost = genNLPCost(L, 0.1, meshVars);

  def _ = dprint(nlp_constr);  // <-- Choose what to print here
  def _ = dprint(nlp_cost);  // <-- Choose what to print here

  def varNameMap = genMeshVarNameMap(meshVars);
  def decls = pprintPythonCasadiDecls(varNameMap);
  def _ = print(decls);
  
  def constrs = pprintPythonCasadiConstrs(nlp_constr, varNameMap);
  def _ = print(constrs);

  def cost = pprintPythonCasadiCost(nlp_cost, varNameMap);
  def _ = print(cost);   
  ()

}
    



