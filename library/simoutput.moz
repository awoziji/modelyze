
include Equation

def probe : <String -> Real> 
type ProbeMap =  (String => [Signal])

type StepVal = (Real,[Real])
type SimulationResult = ([String],[StepVal])


def pprintSimulation(res:SimulationResult) -> String = {
  def (names,stepvals) = res;
  def pnames(varnames:[String]) -> String = {
    match varnames with
    | n::ns -> n ++ "\t" ++ pnames(ns)
    | [] -> "\n"
  };
  def psteps(step:[StepVal], first:Bool) -> String = {
    match step with
    | (t,x::xs)::xxs if first ->        
        real2string(t) ++ "\t" ++ psteps((t,x::xs)::xxs,false)
    | (t,x::xs)::xxs -> 
        (if x == INFINITE then "?" else real2string x) ++
        "\t" ++ psteps((t,xs)::xxs,false)
    | (t,[])::xxs -> "\n" ++ psteps(xxs,true)
    | [] -> ""
  };
  "time\t" ++ pnames(names) ++ psteps(stepvals,true) 
}

def makeStepVal(currtime:Real, yy:{Real}, probes:[(String,[Signal])], ukmap:UkMap) -> StepVal = {
  def mkvals(probes:[(String,[Signal])]) -> [Real] = {        
    match probes with
    | (s,u::us)::ss -> (Array.get yy (fst(Map.find u ukmap)))::
                        (mkvals ((s,us)::ss))
    | (s,[])::ss -> mkvals(ss) 
    | [] -> []
  };
  (currtime,mkvals(probes))
}
  
def makeProbeNames(probes:[(String,[Signal])], n:Int) -> [String] = {
  match probes with
  | (s,u::us)::ss -> {
      def s2 = s ++ (if n >. 1 then "_" ++ int2string(n) else "");
      s2::(makeProbeNames((s,us)::ss, n +. 1));
    }
  | (s,[])::ss -> makeProbeNames(ss,1)
  | [] -> []
}

def addProbe(s:String, u:Signal, ps:ProbeMap) = {
    if Map.mem s ps then Map.add s (u::(Map.find s ps)) ps
    else Map.add s [u] ps
}

def elaborateProbes(model:Equations) -> (<Equations>,ProbeMap) = {
  def elab(e:<>, ps:ProbeMap) -> (<>,ProbeMap) = {
    match e with
    | probe (lift s:String) -> {
        def u:Signal; 
        (u,addProbe s u ps);
      }
    | e1 e2 -> {
       def (e1b,ps1) = elab(e1,ps);
       def (e2b,ps2) = elab(e2,ps1);
       (e1b e2b,ps2);
      }
    | _ -> (e,ps)
  };
  elab(model,Map.empty);
}
 
