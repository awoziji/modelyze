/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010-2011 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

include MechatronicElaboration

let mkvar uks:(Int,UkMap) -> e:<> -> String =
  match uks with
  | (_,ma) -> "uk" ++ int2string(fst (Map.find e ma))

let pprintModelica name:String -> 
                   probelist:[(String,[Signal])] -> 
                   model:Equations -> String =
  let uks = realUnknowns model in
  let real2modelicaString r:Real -> String = 
    if r < 0. then "(" ++ real2string(r) ++ ")" else real2string(r)
  in
  let pprintUnknowns us:(Int,UkMap) -> initvalmap:InitValMap -> String = 
    let initstr u:Signal -> String =
      if Map.mem u initvalmap then
         let (initval,guess) = Map.find u initvalmap in
         "(start=" ++ real2string(initval) ++ 
          (if guess then "" else ",fixed=true") ++ ")"
      else "" 
    in
    let prn us:[(Signal,(Int,Bool))] -> String =
      match us with
      | (u,_)::us -> "  Real " ++ mkvar(uks,u) ++ 
                     initstr(u) ++ ";\n" ++ prn(us) 
      | [] -> ""       
    in prn (Map.toList (snd us))
  in
  let pprintExpr expr:<> -> String =
    match expr with
    | e1 + e2 -> "(" ++ pprintExpr(e1) ++ " + " ++ pprintExpr(e2) ++ ")"
    | e1 - e2 -> "(" ++ pprintExpr(e1) ++ " - " ++ pprintExpr(e2) ++ ")"
    | e1 * e2 -> pprintExpr(e1) ++ " * " ++ pprintExpr(e2) 
    | e1 / e2 -> pprintExpr(e1) ++ " / " ++ pprintExpr(e2) 
    | -e ->     "(-" ++ pprintExpr(e) ++ ")" 
    | e1^e2 -> pprintExpr(e1) ++ " ^ " ++ "(" ++ pprintExpr(e2) ++ ")"
    | ~der e ->   "der(" ++ pprintExpr(e) ++ ")"
    | ~sin e ->   "sin(" ++ pprintExpr(e) ++ ")"
    | ~cos e ->   "cos(" ++ pprintExpr(e) ++ ")"
    | ~tan e ->   "tan(" ++ pprintExpr(e) ++ ")"
    | ~asin e ->  "asin(" ++ pprintExpr(e) ++ ")"
    | ~acos e ->  "acos(" ++ pprintExpr(e) ++ ")"
    | ~atan e ->  "atan(" ++ pprintExpr(e) ++ ")"
    | ~sinh e ->  "sinh(" ++ pprintExpr(e) ++ ")"
    | ~cosh e ->  "cosh(" ++ pprintExpr(e) ++ ")"
    | ~tanh e ->  "tanh(" ++ pprintExpr(e) ++ ")"
    | ~sqrt e ->  "sqrt(" ++ pprintExpr(e) ++ ")"
    | ~exp e ->   "exp(" ++ pprintExpr(e) ++ ")"
    | ~log e ->   "log(" ++ pprintExpr(e) ++ ")"
    | ~log10 e -> "log10(" ++ pprintExpr(e) ++ ")"
    | ~time -> "time"
    | sym:<Real> -> mkvar uks expr
    | val r:Real -> real2modelicaString r
  in
  let pprintEqs model:Equations -> String = 
    match model with
    | e1 ; e2 -> pprintEqs(e1) ++ pprintEqs(e2)
    | e1 = e2 -> "  " ++ pprintExpr(e1) ++ " = " ++ pprintExpr(e2) ++ ";\n" 
    | _ -> ""
  in
  let pprintOutput probes:[(String,[Signal])] -> n:Int -> String =        
    match probes with
    | (s,u::us)::ss -> 
         "  output Real " ++ s ++ (if n >. 1 then "_" ++ int2string(n) 
                                            else "") ++ 
         " = " ++ mkvar(uks,u) ++ ";\n" ++ pprintOutput((s,us)::ss,n +. 1)
    | (s,[])::ss -> pprintOutput ss 1
    | [] -> ""                             
  in
    "model " ++ name ++ "\n" ++ pprintOutput(probelist,1) ++
    "protected\n" ++ pprintUnknowns(uks,initValues model) ++ 
    "equation\n" ++ pprintEqs(model) ++ "end " ++ name ++ ";"
  
let exportModelica name:String -> model:Equations -> String =
  let (model2,probes) = elaborate model in
  pprintModelica name (Map.toList probes) model2






