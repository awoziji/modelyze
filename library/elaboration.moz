/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/



include Equation

type Node = <>
type Unknown = <>
type Branches = <>
type NodeMap = (Node => Unknown)
type NodeMapList = [(Node,Unknown)]
type BranchSet = (Set Branches)
type BranchList = [Branches]
type ExprMap = (Node => Expr)
type ExprList = [(Node, Expr)]


type SubExprMap = (<> => Signal)
type SubExprList = [(<>,Signal)]


def addNode(node:Node, nodemap:NodeMap) -> NodeMap = {
    if Map.mem node nodemap then nodemap
    else {
      def u:<Real>;
      Map.add node u nodemap;
    };
}

def sumexpr(branches:BranchSet) -> ExprMap = {
  def worker(branches:BranchList, emap:ExprMap) -> ExprMap = {
    match branches with
    | (Branch i v p n)::bs -> {
        def emap1 = {
           if Map.mem p emap 
           then Map.add p ((Map.find p emap) + i) emap
           else Map.add p i emap
        };
        def emap2 = {
           if Map.mem n emap1 
           then Map.add n ((Map.find n emap1) - i) emap1
           else Map.add n (-i) emap1;
        };
        worker(bs,emap2);
      }
    | (RefBranch i v p)::bs -> {
        def emap1 = {
            if Map.mem p emap 
            then Map.add p ((Map.find p emap) + i) emap
            else Map.add p i emap
        };
        worker bs emap1;
      }
    | [] -> emap
  };
  worker(Set.toList branches,Map.empty);
}


def sumzero(m:Equations, branches:BranchSet) -> Equations = {
  def worker(elist:ExprList) -> Equations = {
    match elist with
    | (_,e)::es -> e = 0.; worker es
    | [] -> m
  };
  worker(Map.toList (sumexpr(branches)));
}


def potentials(model:Equations) -> (Equations,BranchSet) = {
  def worker(m:Equations, nodemap:NodeMap, branchset:BranchSet) -> (<>,NodeMap,BranchSet) = {
    match m with
    | Branch i v p n -> {
        def nodemap2 = addNode(n,addNode p nodemap);
        def eq = (v = (Map.find p nodemap2) - (Map.find n nodemap2));
        (eq,nodemap2,Set.add m branchset);
      }
    | RefBranch i v p -> {
        def nodemap2 = addNode(p,nodemap);
        def eq = (v = (Map.find p nodemap2));
        (eq,nodemap2,Set.add m branchset);
      }
    | e1 ; e2 -> {
        def (e1b,nodemap1,branchset1) = worker(e1,nodemap,branchset);
        def (e2b,nodemap2,branchset2) = worker(e2,nodemap1,branchset1);
        (e1b ; e2b, nodemap2, branchset2);
      }
    | _ ->  (m,nodemap,branchset) 
  };
  def (model,_,branchset) = worker(model,Map.empty,Set.empty);
  (model,branchset);
}


def elaborateConnections(model:Equations) -> Equations = {
     def (model2,branchset2) = potentials(model);
     sumzero(model2,branchset2);
}



