/*
Modeling Kernel Language (Modelyze) library 
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Base

type Signal = <Real>

def der : Real -> Real
def (')  = der

def hoDer : <Real -> Int -> Real>



type Equations
def (=) : Real -> Real -> Equations
def (;) : Equations -> Equations -> Equations
def NoEqn : Equations

def init : Real -> Real -> Equations 
//def init : Real -> Real 
let (<-)  = init

def time : <Real>
def probe : <String -> Real> 

type Expr = <>

def cleanupEquations(eq:Equations) : Equations = {
    match eq with
    | e1; e2 -> 
       {
          match (cleanupEquations e1, cleanupEquations e2) with
          | (~NoEqn,~NoEqn) -> NoEqn
          | (~NoEqn,e) -> e
          | (e,~NoEqn) -> e
          | (e1b,e2b) -> e1b; e2b
       }
    | _ -> eq
}

def Branch : Real -> Real -> ? -> ? -> Equations
def RefBranch : Real -> Real -> ? -> Equations







