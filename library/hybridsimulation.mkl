/*
Modeling Kernel Language (MKL) library 
Copyright (C) 2010 David Broman

MKL library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MKL library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with MKL library.  If not, see <http://www.gnu.org/licenses/>.
*/

include HybridModeling
include Mechanical
include Electrical
include Elaboration
include Differentiation

let isMechatronicBranch b:Node = 
  match b with
  | ~ElectricalBranch -> true
  | ~RotationalBranch -> true
  | _ -> false

let isMechatronicRefBranch b:Node = 
  match b with
  | ~ElectricalRefBranch -> true
  | ~RotationalRefBranch -> true
  | _ -> false

let ROOT_TOL = 1e-10

type StepVal = (Real,[Real])
type SimulationResult = ([String],[StepVal])
type InitValMap = (<Real> => <Real>)
type ZeroCrossing = <Real>

let lastEvent = {-0.10}

let extractCurrentState model:Equations -> Equations =
  let extract cstate:State -> model:Equations -> <> =
    match model with
    | ~statechart s e -> extract s e
    | ~state s e -> if s == cstate then  extract cstate e else NoEq
    | ~transition _ _ _ -> NoEq
    | e1 e2 -> (extract cstate e1) (extract cstate e2)
    | e -> e
  in  
    extract topstate model 

type Residual = Real -> {Real} -> {Real} -> [Real]

let initValues eqs:Equations -> InitValMap =
  let get eqs:Equations -> acc:InitValMap -> InitValMap =
    match eqs with
    | e1 ; e2 -> get e2 (get e1 acc)
    | ~Init x v -> Map.add x v acc
    | _ -> acc
  in get eqs (Map.empty)


let makePreValMap yy:{Real} -> yp:{Real} -> ukmap:UkMap -> 
                  (InitValMap,InitValMap) =
  let worker lst:UkList -> yymap:InitValMap -> ypmap:InitValMap -> 
             (InitValMap,InitValMap) =
    match lst with
    | (u,(i,_))::xs ->
         worker xs (Map.add u (val (Array.get yy i)) yymap)
                   (Map.add u (val (Array.get yp i)) ypmap) 
    | [] -> (yymap,ypmap)
  in
    worker (Map.toList ukmap) (Map.empty) (Map.empty)
 
//       let v = Array.get (if isDeriv then yp else yy) i in
//       worker xs (Map.add u (val v) acc)
//    | [] -> acc
//  in 
//    worker (Map.toList ukmap) (Map.empty)

let eval expr:Expr -> ctime:Real -> valmap:InitValMap -> Real =
  let worker e:<> -> Real = 
    match e with
    | (val f:(Real -> Real -> Real)) e1 e2 -> 
           f (worker e1) (worker e2)
    | (val f:(Real -> Real)) e1 -> f  (worker e1) 
    | val v:Real -> v
    | ~time -> ctime
    | ~der x -> (match x with 
                | uk:Signal -> worker (Map.find (der x) valmap) 
                | _ -> error "Derivatives only allowed on unknowns")
    | uk:Signal -> worker (Map.find e valmap)
    | _ -> let _ = dpa e in error "Unsupported model construct" 
  in
    worker expr 

let makeResidual model:Equations -> ukmap:UkMap -> 
                 ctime:Real -> yy:{Real} -> yp:{Real} -> [Real] =
  let realExpr e:<> -> Real = 
    match e with
    | (val f:(Real -> Real -> Real)) e1 e2 -> 
           f (realExpr e1) (realExpr e2)
    | (val f:(Real -> Real)) e1 -> f  (realExpr e1) 
    | val v:Real -> v
    | ~time -> ctime
    | ~der x -> (match x with 
                | uk:Signal -> Array.get yp (fst (Map.find x ukmap))
                | _ -> error "Derivatives only allowed on unknowns")
    | uk:Signal -> Array.get yy (fst(Map.find e ukmap))
    | _ -> let _ = dpa e in error "Unsupported model construct" 
  in
  let traverseEq m:Equations -> acc:[Real] -> [Real] =
    match m with
    | e1 ; e2 -> traverseEq e2 (traverseEq e1 acc)
    | e1 = e2 -> (realExpr e1 - realExpr e2) :: acc
    | _ -> acc
  in traverseEq model [] 

let makeRootFun zcList:[ZeroCrossing] -> ukmap:UkMap -> initVal:InitValMap ->
                ctime:Real -> yy:{Real} -> yp:{Real} -> [Real] = 
  [if (ctime - (Array.get lastEvent 0)) < ROOT_TOL then ROOT_TOL else
   (Array.get yy 0) + 1.7]
/*  let eval = evaluate false ukmap yy yp (Map.empty) initVal ctime in
  let make zcList:[ZeroCrossing] -> acc:[Real] -> [Real] =
    match zcList with
    | exp::ls -> 
          make ls ((castReal(eval exp))::acc)
    | [] -> acc
  in make zcList []
*/

let eventFound state:DAESolver -> ctime:Real -> Bool =
  let roots = DAESolver.roots state in
  if (Array.length roots) !=. 0 
    then let _ = Array.set lastEvent 0 ctime in true 
    else false
  

//Generate arrays of initial values
let makeInitStateArrays initvals:InitValMap -> 
                        yymap:InitValMap -> ypmap:InitValMap -> 
                        ctime:Real -> ukmap:UkMap -> ({Real},{Real}) =
  let size = Map.size ukmap in
  let yy = Array.make size 0. in
  let yp = Array.make size 0. in
  let setvals initvals:[(Signal,Signal)] -> arr:{Real} -> () =
    match initvals with
    | (u,e)::xs -> 
        let v = eval e ctime yymap in
        let _ = if Map.mem u ukmap 
                  then Array.set arr (fst (Map.find u ukmap)) v  
                  else ()
        in setvals xs arr
    | [] -> ()
  in 
    let _ = setvals (Map.toList yymap) yy in
    let _ = setvals (Map.toList initvals) yy in
    let _ = setvals (Map.toList ypmap) yp in
    (yy, yp)


let makeStepVal currtime:Real -> yy:{Real} ->
                probes:[(String,[Signal])] -> ukmap:UkMap -> StepVal =
  let mkvals probes:[(String,[Signal])] -> [Real] =        
    match probes with
    | (s,u::us)::ss -> (Array.get yy (fst(Map.find u ukmap)))::
                        (mkvals ((s,us)::ss))
    | (s,[])::ss -> mkvals ss 
    | [] -> []
  in (currtime,mkvals probes)
  
let makeProbeNames probes:[(String,[Signal])] -> n:Int -> [String] =        
  match probes with
  | (s,u::us)::ss -> 
    let s2 = s ++ (if n >. 1 then "_" ++ int2string n else "") in
    s2::(makeProbeNames ((s,us)::ss) (n +. 1))
  | (s,[])::ss -> makeProbeNames ss 1
  | [] -> []

let initConditionCorrection ukmap:UkMap -> {Real} =
  let id = Array.make (Map.size ukmap) 0. in
  let worker uklist:[(Signal,(Int,Bool))] -> {Real} =
    match uklist with
    | (u,(i,true))::us -> let _ = Array.set id i 1.0 in worker us
    | _::us -> worker us
    | [] -> id
  in worker (Map.toList ukmap)

let revResult lst:[StepVal] -> acc:[StepVal] -> [StepVal] =
  match lst with
  | x::xs -> revResult xs (x::acc)
  | [] -> acc 

let simulate model:Equations -> steptime:Real -> endtime:Real -> 
             SimulationResult =
  let (model1,probes) = elaborateProbes model in
  let probelist = Map.toList probes in

  let dtloop currtime:Real -> acc:[StepVal] -> model1:Equations -> 
             yymap:InitValMap -> ypmap:InitValMap ->
             olddmap:DerivMap -> [StepVal] = 
    let modelNoState = extractCurrentState model1 in
    let model2 = (elaborateConnections isMechatronicBranch 
                  isMechatronicRefBranch modelNoState) in
    let (model3,newdmap) = elaborateDerivatives model2 olddmap in
    let ukmap = makeUkMap model3 in
    let _ = dpa ukmap in
    let residual = makeResidual model3 ukmap in
    let initvalmap = initValues model3 in
    let (yy,yp) = makeInitStateArrays initvalmap yymap ypmap currtime ukmap in
    let _ = dpa ("--- init") in
    let _ = dpa (yy) in
    let _ = dpa (yp) in
    let id = initConditionCorrection ukmap in
    let rootfun = makeRootFun [] ukmap initvalmap in  
    //let _ = dpa ("--- second1") in
    //let _ = dpa (currtime) in
    //let _ = dpa (yy) in
    //let _ = dpa (yp) in
    //let _ = dpa (id) in
    let state = DAESolver.makehybrid currtime yy yp id residual rootfun in
    //let _ = dpa ("--- second2") in

    let ctloop currtime:Real -> acc:[StepVal] -> ([StepVal],Real) = 
      if currtime >= endtime 
        then (acc,currtime)
        else
          let newtime = DAESolver.step steptime state in 
          let stepval = makeStepVal newtime yy probelist ukmap in
          if newtime == 0. || eventFound state newtime
            then (acc,newtime)
            else ctloop (newtime + steptime) (stepval::acc)
    in 
      let (acc2,newtime) = ctloop currtime acc in
      let _ = DAESolver.close state in
      if newtime >= endtime then acc2  
      else 
        let (yymap,ypmap) = makePreValMap yy yp ukmap in
        let _ = dpa ("--- after") in
        let _ = dpa (yymap) in
        let _ = dpa (ypmap) in
        let _ = dpa (yy) in
        let _ = dpa (yp) in
        dtloop newtime acc2 model1 yymap ypmap newdmap
      //acc2 //do not do the disrete loop now...
  in
    let result = revResult (dtloop 0. [] model1 
                 (Map.empty) (Map.empty) (Map.empty)) [] in
    (makeProbeNames probelist 1,result) 


let pprintSimulation res:SimulationResult -> String =
  let (names,stepvals) = res in  
  let psteps step:[StepVal] -> first:Bool -> String =
    match step with
    | (t,x::xs)::xxs when first ->        
        real2string t ++ "\t" ++ psteps ((t,x::xs)::xxs) false
    | (t,x::xs)::xxs -> 
        real2string x ++ "\t" ++ psteps ((t,xs)::xxs) false
    | (t,[])::xxs -> "\n" ++ psteps xxs true
    | [] -> ""
  in psteps stepvals true
 
let printsim model:Equations -> steptime:Real -> endtime:Real -> () =
      print (pprintSimulation (simulate model steptime endtime))





