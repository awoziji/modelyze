Modelyze toolchain
Copyright (C) 2010-2014 David Broman

Modelyze toolchain is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze toolchain is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Modelyze toolchain.  If not, see <http://www.gnu.org/licenses/>.

Modelyze toolchain, version 1.12
-----------------------------------------------------
This project contains a simple interpreter for the 
Modelyze language. For a detailed overview of the
Modelyze language, please see the technical report:

David Broman and Jeremy G. Siek. "Modelyze: a Gradually Typed Host Language 
for Embedding Equation-Based Modeling Languages", Technical Report No. 
UCB/EECS-2012-173, University of California, Berkeley, June 30, 2012.
Available at: http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.html

A comprehensive description of Modelyze's predecessor, called MKL, is available
in David Broman's PhD Thesis:
http://www.bromans.com/david/publ/thesis-2010-david-broman.pdf

If you have any comments or questions, please send an email to
davbr@berkeley.edu

INSTALLATION (Mac OS)
--------------------
The following has been tested on OS X 10.9.2, but should work on 
other Mac OS versions as well.

1. Install the SUNDIALS solver suite. The current version is tested on version 2.5.0.
   http://computation.llnl.gov/casc/sundials/
   For help, see  "SUNDIALS QUICK GUIDE" below.
2. Install Macports (including X11 support)
   http://www.macports.org/
3. Install Objective Caml compiler and gnuplot via Macports.
   Note that version 4.01.0 or later is required.
   >> sudo port install ocaml gnuplot
4. If you do not have git installed, install it. 
   See for instance http://gitx.frim.nl/
5. If you have not done it already, clone the Modelyze project from GitHub:
   >> git clone https://github.com/david-broman/modelyze.git
6. Compile the code:
   >> cd modelyze
   >> make

INSTALLATION (Linux)
---------------------
The following has been tested on Ubuntu 12.04 LTS, but should work on
other Linux distributions as well.

1. Install OCaml, GnuPlot and SUNDIALS. Execute the following in the terminal:
   >> sudo apt-get install ocaml gnuplot libsundials-serial-dev
2. If you do not have git installed, install it:
   >> sudo apt-get install git
3. If you have not done it already, clone the Modelyze project from GitHub:
   >> git clone https://github.com/david-broman/modelyze.git
4. Compile the code:
   >> cd modelyze
   >> make



SUNDIALS QUICK GUIDE
-----------------------------------
Here are some step-by-step instructions for installing SUNDIALS. These instructions
were tested on MacOS 10.5.7 and SUNDIALS v.2.5.0.

- Download the full SUNDIALS package sundials-2.5.0.tar.gz from 
  http://computation.llnl.gov/casc/sundials/.

- Unzip it. Run the following commands within the unzipped folder
  >> ./configure
  >> make
  >> sudo make install

- Header files are now installed under /usr/local/include and the
  library files are installed under /usr/local/lib

 
 


EXECUTING EXAMPLES
--------------------
Under folder "library", a simple standard library for Modelyze is provided.
The files named "test-*" are testfiles programs. To execute a program, 
run for instance:

./moz test-lotkavolterra.moz

This prints the plot data to the standard output. If GnuPlot is installed,
plotting can be done as follows:

./mozplot test-hybrid-ball-stairs.moz

LICENSE
-------
All files in the Modelyze toolchain project, excepts for files in the folders 
"library/" and "ext/" are under the GNU General Public Licence according 
to file COPYING. Files under folder "ext/" have specific licenses given 
in each sub-folder. Files under folder "library/" are under the GNU Lesser
General Public License according to file "library/COPYING.LESSER".





REVISIONS
---------

Version 1.12 November 22, 2013
  - Added new regression testing system
  - Added a number of new DSLs

Version 1.11 September 24, 2013
  - Minor bugfixes and cleanup.

Version 1.1 December 17, 2012.
  - Changed the name of the project from "MKL" to "Modelyze". The rationale
    for the change is to emphasize that Modelyze is a host language for
    embedding DSLs.
  - Full gradual typing is now implemented according to the technical report
    http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.html. The
    type system and the symbol lifting analysis correspond to the description.
    Cast insertion has not been implemented.  
  - Pattern matching on symbols do not need to have the ~ anymore. Instead, the
    compiler recognized if the pattern variable equal to a globally defined 
    symbol and in such a case it is treated as a symbol matching instead of
    a pattern variable 
  - Simplified the way of creating symbolic data types. Now these are always
    symbolic types. Defintions of equations and nodes are now simpler.
  - Add def-syntax, which is closer to Java or C. { } are used as
    grouping of expressions, not as defining arrays.
  - Added new syntax for derivatives, e.g., der(x) can be written x' and
    der(der(y)) can be written y''
  - Changed the syntax for polymorphic equality from == to <==>. Added 
    operators == and ==. meaning real and integer equality test respectively.
    The rationale is that == can now be used as part of a model.
  - Added two new keywords "begin" and "end", which have the same 
    functionality as parentheses.
  - Renamed initialization keyword from "Init" to "init". Also, the 
    init operator "<-" can be used instead of "init".
  - Renamed the "when" guard on patterns to use keyword "if". In this
    way, "when" can be used in the DSLs.
  - It is now possible to plot a probe that does not exist during the
    whole simulation, e.g., a probe that exists in a specific state.
  - A function can be called either by using space between paranthesis, e.g.
      foo p1 p2
    or to use paranthesis and a comma separated list (as in C or Java)
      foo(p1,p2)
    For the latter, it is important that it there are no white space
    between foo and the left paranhesis. In this case, this is
    translated into a curried call. If foo was supposed to take a tuple
    as argument, it can be called as follows (note the space)
      foo (p1,p2)

Version 1.0.0 - October 1, 2010
  - First version corresponding to David Broman's PhD Thesis.
  - Changed operators for Real and Int, so that e.g., -. and +. are
    for integer operations instead of Real. The rationale is that most
    expressions are written using Reals.
